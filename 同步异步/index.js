/**
 * JS本身是单线程的(浏览器只分配一个线程供JS代码自上而下执行)
 *  => 在JS中大部分都是同步编程：当前任务不完成，下一个任务不会执行。(任务是逐步执行的)
 *  => 但是对于某些特殊的需求，也需要按照异步编程的思维去处理
 *     [浏览器端]
 *     * 定时器是异步编程
 *     * JS的事件绑定是异步编程
 *     * Ajax请求的发送(HTTP事务)
 *     * Promise设计模式管控异步编程(包括 async/await...)
 *     [Node端]
 *     * FS运行 I/O操作是异步的
 *     * setImmediate
 * JS中异步操作的运行机制: 事件队列 Event Queue 和 事件循环 Event Loop
 */

let n = 0

setTimeout(() => { // 宏任务
  n += 10
  console.log(n, '=============> 20') //2-15
}, 1000);

n += 5
console.log(n, '=============> 24') //1-5